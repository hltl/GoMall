// Code generated by hertz generator.

package main

import (
	"context"
	"log"
	"net"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/hltl/GoMall/biz/proto/user"
	"github.com/hltl/GoMall/biz/router"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"

	hertzlog "github.com/hertz-contrib/logger/logrus"
	"github.com/hltl/GoMall/biz/database"
	"github.com/hltl/GoMall/biz/proto/auth"
	"github.com/sirupsen/logrus"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

func main() {
	// 配置日志格式和级别
	logrus.SetFormatter(&logrus.JSONFormatter{})
	logrus.SetLevel(logrus.TraceLevel)

	// 创建日志文件（新增）
	file, err := os.OpenFile("mall.log", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
	if err == nil {
		logrus.SetOutput(file)
		logrus.Info("成功初始化文件日志")
	} else {
		logrus.WithError(err).Error("无法创建日志文件，请检查权限和路径")
	}

	// 初始化数据库
	db := database.InitDB()

	// 创建gRPC服务实例
	grpcServer := grpc.NewServer()

	// 注册反射服务（新增）
	reflection.Register(grpcServer)

	// 先创建UserService实例（AuthClient稍后注入）
	userServer := &router.UserServer{
		DB:         db,
		AuthClient: nil, // 暂时置空
	}
	user.RegisterUserServiceServer(grpcServer, userServer)

	// 注册AuthService
	auth.RegisterAuthServiceServer(grpcServer, &router.AuthService{})

	// 修改gRPC服务启动部分
	lis, err := net.Listen("tcp", ":50052")
	if err != nil {
		logrus.Fatalf("gRPC端口监听失败: %v", err)
	}

	// 添加启动日志
	logrus.Info("启动gRPC服务在端口50052")
	go func() {
		if err := grpcServer.Serve(lis); err != nil {
			logrus.Fatalf("gRPC服务启动失败: %v", err)
		}
	}()

	// 现在创建认证客户端（确保服务已启动）
	authClient, err := router.NewAuthClient("localhost:50052")
	if err != nil {
		log.Fatalf("认证服务连接失败: %v", err)
	}

	// 注入AuthClient到UserService实例
	userServer.AuthClient = authClient.Service

	// 修改健康检查调用方法
	if _, err := authClient.Service.VerifyTokenByRPC(context.Background(), &auth.VerifyTokenReq{
		Token: "test",
	}); err != nil {
		log.Fatalf("认证服务健康检查失败: %v", err)
	}

	// 在创建authClient后添加健康检查
	if _, err := authClient.Service.HealthCheck(context.Background(), &auth.HealthCheckReq{}); err != nil {
		logrus.WithError(err).Fatal("gRPC健康检查失败")
	} else {
		logrus.Info("gRPC连接正常")
	}

	// 创建Hertz实例
	hlog.SetLogger(hertzlog.NewLogger(
		hertzlog.WithLogger(logrus.StandardLogger()),
	))
	h := server.Default(
		server.WithHostPorts(":8888"),
		server.WithExitWaitTime(5*time.Second),
	)

	// 先注册中间件
	h.Use(func(c context.Context, ctx *app.RequestContext) {
		ctx.Set("userService", userServer)
		ctx.Next(c)
	})

	// 后注册路由
	register(h, authClient)

	h.POST("/test", func(c context.Context, ctx *app.RequestContext) {
		panic("test panic")
	})

	// 添加HTTP服务启动日志
	logrus.WithField("port", 8888).Info("启动HTTP服务")
	h.Spin()

	// 添加优雅关闭
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	// 关闭连接
	grpcServer.GracefulStop()
	authClient.Close()
	sqlDB, _ := db.DB()
	sqlDB.Close()
}
