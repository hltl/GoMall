// Code generated by hertz generator.

package main

import (
	"context"
	"net"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/hltl/GoMall/api/biz/proto/user"
	"github.com/hltl/GoMall/api/biz/router"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"

	"github.com/google/uuid"
	hertzlog "github.com/hertz-contrib/logger/logrus"
	"github.com/hltl/GoMall/api/biz/database"
	"github.com/hltl/GoMall/api/biz/proto/auth"
	"github.com/hltl/GoMall/api/biz/registry"
	"github.com/joho/godotenv"
	"github.com/sirupsen/logrus"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

func main() {
	// 加载.env文件
	if err := godotenv.Load(); err != nil {
		logrus.WithError(err).Warn("无法加载.env文件")
	}

	// 配置日志格式和级别
	logrus.SetFormatter(&logrus.JSONFormatter{})
	logrus.SetLevel(logrus.TraceLevel)

	// 创建日志文件（新增）
	file, err := os.OpenFile("mall.log", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
	if err == nil {
		logrus.SetOutput(file)
		logrus.Info("成功初始化文件日志")
	} else {
		logrus.WithError(err).Error("无法创建日志文件，请检查权限和路径")
	}

	// 初始化数据库
	db := database.InitDB()

	// 创建gRPC服务实例
	grpcServer := grpc.NewServer()

	// 注册反射服务（新增）
	reflection.Register(grpcServer)

	// 先创建UserService实例（AuthClient稍后注入）
	userServer := &router.UserServer{
		DB:         db,
		AuthClient: nil, // 暂时置空
	}
	user.RegisterUserServiceServer(grpcServer, userServer)

	// 注册AuthService
	auth.RegisterAuthServiceServer(grpcServer, &router.AuthService{})

	// 修改gRPC服务启动部分
	lis, err := net.Listen("tcp", ":50052")
	if err != nil {
		logrus.Fatalf("gRPC端口监听失败: %v", err)
	}

	// 添加启动日志
	logrus.Info("启动gRPC服务在端口50052")

	// 修改后：添加启动完成通知
	grpcStarted := make(chan struct{})
	go func() {
		logrus.Info("gRPC服务开始启动...")
		go func() {
			// 延迟1秒后发送启动完成信号
			time.Sleep(time.Second)
			close(grpcStarted)
			logrus.Info("gRPC服务启动完成")
		}()
		if err := grpcServer.Serve(lis); err != nil {
			logrus.Fatalf("gRPC服务启动失败: %v", err)
		}
	}()
	<-grpcStarted // 等待服务真正启动

	// 现在创建认证客户端（确保服务已启动）
	authClient, err := router.NewAuthClient("localhost:50052")
	if err != nil {
		logrus.WithError(err).Fatal("认证服务连接失败")
	}
	logrus.Info("认证客户端连接成功")

	// 注入AuthClient到UserService实例
	userServer.AuthClient = authClient.Service

	// 修改健康检查调用方法
	if _, err := authClient.Service.VerifyTokenByRPC(context.Background(), &auth.VerifyTokenReq{
		Token: "test",
	}); err != nil {
		logrus.WithError(err).Fatal("认证服务健康检查失败")
	}
	logrus.Info("认证服务健康检查通过")

	// 在创建authClient后添加健康检查
	if _, err := authClient.Service.HealthCheck(context.Background(), &auth.HealthCheckReq{}); err != nil {
		logrus.WithError(err).Fatal("gRPC健康检查失败")
	} else {
		logrus.Info("gRPC连接正常")
	}

	// 创建Hertz实例
	hlog.SetLogger(hertzlog.NewLogger(
		hertzlog.WithLogger(logrus.StandardLogger()),
	))
	h := server.Default(
		server.WithHostPorts(":8888"),
		server.WithExitWaitTime(5*time.Second),
	)

	// 注入userService到全局中间件
	h.Use(func(c context.Context, ctx *app.RequestContext) {
		ctx.Set("userService", userServer)
		logrus.WithFields(logrus.Fields{
			"path":   string(ctx.Path()),
			"method": string(ctx.Method()),
		}).Debug("注入userService到请求上下文")
		ctx.Next(c)
	})

	// 添加CORS中间件
	h.Use(func(c context.Context, ctx *app.RequestContext) {
		ctx.Header("Access-Control-Allow-Origin", "http://localhost:3000")
		ctx.Header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		ctx.Header("Access-Control-Allow-Headers", "Content-Type, Authorization")
		ctx.Header("Access-Control-Allow-Credentials", "true")

		if string(ctx.Method()) == "OPTIONS" {
			ctx.AbortWithStatus(204)
			return
		}
		ctx.Next(c)
	})

	// 注册公开路由（不需要认证）
	h.POST("/register", router.UserHandlerRegister)
	h.POST("/login", router.UserHandlerLogin)
	h.GET("/health", func(c context.Context, ctx *app.RequestContext) {
		ctx.JSON(200, map[string]string{"status": "ok"})
	})

	// 创建需要认证的路由组
	privateGroup := h.Group("/api")
	// 为私有路由组添加认证中间件
	privateGroup.Use(router.AuthMiddleware(authClient))

	// 注册需要认证的路由
	{
		privateGroup.POST("/test", func(c context.Context, ctx *app.RequestContext) {
			panic("test panic")
		})
		// 其他需要认证的路由...
	}

	// 添加HTTP服务启动日志
	logrus.WithField("port", 8888).Info("启动HTTP服务")

	// 创建服务注册中心客户端
	etcdRegistry, err := registry.NewEtcdRegistry([]string{"localhost:2379"})
	if err != nil {
		logrus.WithError(err).Fatal("创建etcd注册中心客户端失败")
	}
	defer etcdRegistry.Close()

	// 注册服务实例
	serviceInstance := &registry.ServiceInstance{
		ID:      uuid.New().String(),
		Name:    "gomall-api",
		Address: "localhost",
		Port:    8888,
		Metadata: map[string]string{
			"version": "1.0",
		},
	}

	if err := etcdRegistry.Register(context.Background(), serviceInstance); err != nil {
		logrus.WithError(err).Fatal("服务注册失败")
	}

	// 启动HTTP服务
	go h.Spin()

	// 等待退出信号
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	// 优雅关闭时注销服务
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := etcdRegistry.Deregister(ctx, serviceInstance); err != nil {
		logrus.WithError(err).Error("服务注销失败")
	}

	// 关闭其他连接
	grpcServer.GracefulStop()
	authClient.Close()
	sqlDB, _ := db.DB()
	sqlDB.Close()
}
